@page "/fetchuserdetails/{MyErrorMessage?}/{MyConfirmationMessage?}"
@using BlazorDemo_BlazorUI.Models
@using Newtonsoft.Json
@using System.Net.Http.Headers;
@inject HttpClient Http
@inject IConfiguration configuration;
@inject LoginResult loginResult;

<h1>User Data</h1>
<p>Blazor CRUD operation</p>

@if (String.IsNullOrWhiteSpace(MyErrorMessage) == false)
{
    <div class="row">
    <div class="mt-2" style="color:red">@MyErrorMessage</div>
    </div>
}
@if (String.IsNullOrWhiteSpace(MyConfirmationMessage) == false)
{
    <div class="row">
    <div class="mt-2 " style="color:green">@MyConfirmationMessage</div>
    </div>
}

<div class="row">
    <div class="col-md-6">
        <a href='/user/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add User
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search user by name"
        @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times">Reset</i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (userList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>UserName</th>
                <th>FirstName</th>
                <th>LastName</th>
                <th>E-mail</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in userList)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>
                        <a href='/user/edit/@user._UserID' class="btn btn-outline-info" role="button">
                            Edit
                        </a>
                        <a href='/user/delete/@user._UserID' class="btn btn-outline-danger" role="button">
                            Remove
                        </a>
                        <a href='/user/changepassword/@user._UserID' class="btn btn-outline-warning" role="button">
                            Change password
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
@code {
    [Parameter]
    public string? MyErrorMessage { get; set; }
    [Parameter]
    public string MyConfirmationMessage { get; set; }

    protected string backendAPIUrl = "";
    protected List<_User> userList = new();
    protected List<_User> searchUserData = new();
    protected _User user = new();
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        backendAPIUrl = configuration["BackendAPISettings:BackendAPIUrl"] ?? "";
        await GetUser();
    }

    protected async Task GetUser()
    {
        try
        {
            // add the JWT bearer token to the header
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", loginResult.jwtBearer);
            // Grab ApiResult onbject from remote API - /CoreApi/_User/all_Users
            ApiResultModel? answer = await Http.GetFromJsonAsync<ApiResultModel>(backendAPIUrl +"/CoreApi/_User/all_Users");

            if (answer != null && answer.Success)
            {
                List<_User> userList = JsonConvert.DeserializeObject<List<_User>>(answer?.Result?.ToString());
                searchUserData = userList;
            }
        }
        catch 
        {
            MyConfirmationMessage = "Not logged in or unauthorized access or connection issue.";
        }
    }

    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            userList = searchUserData
                .Where(x => x.UserName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            userList = searchUserData;
        }
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        userList = searchUserData;
    }
}