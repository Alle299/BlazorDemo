@page "/user/changepassword/{_userId:guid}"
@using BlazorDemo_BlazorUI.Models
@using Newtonsoft.Json;
@using System.Text;
@using System.Net.Http.Headers;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject LoginResult loginResult;
@inject IConfiguration configuration;
@inject IJSRuntime JS;

<h1>@Title</h1>
<hr />
<EditForm Model="@_user" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator />
    <div class="row my-3">
        <label for="Name" class="col-sm-1 pt-2 control-label">UserName</label>
        <div class="col-sm-3 pt-2">
            @_user.UserName
        </div>
    </div>

    <div class="row my-3">
        <label for="Password" class="col-sm-1 pt-2 control-label">Password</label>
        <div class="col-sm-3">
            <InputText class="form-control" @bind-Value="_user.PasswordHash" />
        </div>
        <ValidationMessage For="@(() => _user.PasswordHash)" />
    </div>
   
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>&nbsp;&nbsp;
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>
@code {
    protected string backendAPIUrl = "";
    protected string MyErrorMessage = " ";
    protected string MyConfirmationMessage = " ";

    [Parameter]
    public Guid _userId { get; set; }
    protected string Title = "Add";
    protected _User _user = new _User();

    //set the initial data
    protected override async Task OnInitializedAsync()
    {
        backendAPIUrl = configuration["BackendAPISettings:BackendAPIUrl"] ?? "";
    }

    protected override async Task OnParametersSetAsync()
    {   
        // add the JWT bearer token to the header
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", loginResult.jwtBearer);

        backendAPIUrl = configuration["BackendAPISettings:BackendAPIUrl"] ?? "";
        Title = "Change password";
        ApiResultModel? answer = await Http.GetFromJsonAsync<ApiResultModel>(backendAPIUrl + "/CoreApi/_User/details/" + _userId);
        if (answer != null && answer.Success)
        {
            _user = JsonConvert.DeserializeObject<_User>(answer?.Result?[0].ToString());
        }
    }

    protected async Task SaveUser()
    {
        var MyErrorMessage = " ";
        var MyConfirmationMessage = " ";

        // add the JWT bearer token to the header
       // Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", loginResult.jwtBearer);

        // Put _User to Api to update database entity.
        var update_Answer = await Http.PutAsJsonAsync(backendAPIUrl + "/CoreApi/_User/changepassword_User", _user);
        var response = await update_Answer.Content.ReadAsStringAsync();
        if (update_Answer.IsSuccessStatusCode)
        {
            MyConfirmationMessage = $"User {_user.UserName} updated successfully";
        }
        else
        {
            MyErrorMessage = $"Failed to update user {_user.UserName}.";
        }

        // return to _UserDetails page
        NavigationManager.NavigateTo($"/fetchuserdetails/{MyErrorMessage}/{MyConfirmationMessage}");
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/fetchuserdetails");
    }

}